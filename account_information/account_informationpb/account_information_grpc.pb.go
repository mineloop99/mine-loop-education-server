// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package account_informationpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AccountInformationServiceClient is the client API for AccountInformationService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AccountInformationServiceClient interface {
	WelcomeMessage(ctx context.Context, in *WelcomeMessageRequest, opts ...grpc.CallOption) (*WelcomeMessageRespone, error)
	FetchUserInformation(ctx context.Context, in *FetchUserInformationRequest, opts ...grpc.CallOption) (*FetchUserInformationRespone, error)
	EditUserInformation(ctx context.Context, in *EditUserInformationRequest, opts ...grpc.CallOption) (*EditUserInformationRespone, error)
}

type accountInformationServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAccountInformationServiceClient(cc grpc.ClientConnInterface) AccountInformationServiceClient {
	return &accountInformationServiceClient{cc}
}

func (c *accountInformationServiceClient) WelcomeMessage(ctx context.Context, in *WelcomeMessageRequest, opts ...grpc.CallOption) (*WelcomeMessageRespone, error) {
	out := new(WelcomeMessageRespone)
	err := c.cc.Invoke(ctx, "/account_information.AccountInformationService/WelcomeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInformationServiceClient) FetchUserInformation(ctx context.Context, in *FetchUserInformationRequest, opts ...grpc.CallOption) (*FetchUserInformationRespone, error) {
	out := new(FetchUserInformationRespone)
	err := c.cc.Invoke(ctx, "/account_information.AccountInformationService/FetchUserInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *accountInformationServiceClient) EditUserInformation(ctx context.Context, in *EditUserInformationRequest, opts ...grpc.CallOption) (*EditUserInformationRespone, error) {
	out := new(EditUserInformationRespone)
	err := c.cc.Invoke(ctx, "/account_information.AccountInformationService/EditUserInformation", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountInformationServiceServer is the server API for AccountInformationService service.
// All implementations must embed UnimplementedAccountInformationServiceServer
// for forward compatibility
type AccountInformationServiceServer interface {
	WelcomeMessage(context.Context, *WelcomeMessageRequest) (*WelcomeMessageRespone, error)
	FetchUserInformation(context.Context, *FetchUserInformationRequest) (*FetchUserInformationRespone, error)
	EditUserInformation(context.Context, *EditUserInformationRequest) (*EditUserInformationRespone, error)
	mustEmbedUnimplementedAccountInformationServiceServer()
}

// UnimplementedAccountInformationServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAccountInformationServiceServer struct {
}

func (UnimplementedAccountInformationServiceServer) WelcomeMessage(context.Context, *WelcomeMessageRequest) (*WelcomeMessageRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WelcomeMessage not implemented")
}
func (UnimplementedAccountInformationServiceServer) FetchUserInformation(context.Context, *FetchUserInformationRequest) (*FetchUserInformationRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchUserInformation not implemented")
}
func (UnimplementedAccountInformationServiceServer) EditUserInformation(context.Context, *EditUserInformationRequest) (*EditUserInformationRespone, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditUserInformation not implemented")
}
func (UnimplementedAccountInformationServiceServer) mustEmbedUnimplementedAccountInformationServiceServer() {
}

// UnsafeAccountInformationServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AccountInformationServiceServer will
// result in compilation errors.
type UnsafeAccountInformationServiceServer interface {
	mustEmbedUnimplementedAccountInformationServiceServer()
}

func RegisterAccountInformationServiceServer(s grpc.ServiceRegistrar, srv AccountInformationServiceServer) {
	s.RegisterService(&AccountInformationService_ServiceDesc, srv)
}

func _AccountInformationService_WelcomeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WelcomeMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInformationServiceServer).WelcomeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_information.AccountInformationService/WelcomeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInformationServiceServer).WelcomeMessage(ctx, req.(*WelcomeMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInformationService_FetchUserInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchUserInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInformationServiceServer).FetchUserInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_information.AccountInformationService/FetchUserInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInformationServiceServer).FetchUserInformation(ctx, req.(*FetchUserInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AccountInformationService_EditUserInformation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditUserInformationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountInformationServiceServer).EditUserInformation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/account_information.AccountInformationService/EditUserInformation",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountInformationServiceServer).EditUserInformation(ctx, req.(*EditUserInformationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AccountInformationService_ServiceDesc is the grpc.ServiceDesc for AccountInformationService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AccountInformationService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "account_information.AccountInformationService",
	HandlerType: (*AccountInformationServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WelcomeMessage",
			Handler:    _AccountInformationService_WelcomeMessage_Handler,
		},
		{
			MethodName: "FetchUserInformation",
			Handler:    _AccountInformationService_FetchUserInformation_Handler,
		},
		{
			MethodName: "EditUserInformation",
			Handler:    _AccountInformationService_EditUserInformation_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "account_informationpb/account_information.proto",
}
